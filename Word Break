bool rec(string &s,unordered_map<string,int> &mp,vector<int> &dp){
    if(mp.find(s)!=mp.end())
    return 1;
    if(dp[s.length()]!=-1)
    return dp[s.length()];
    int start=0;
    for(int j=1;j<s.length();j++){
        string t=s.substr(start,j);
        if(mp.find(t)!=mp.end()){
            string p=s.substr(j,s.length()-j);
            if(rec(p,mp,dp))
            return dp[s.length()]= 1;
        }
    }
return dp[s.length()]= 0;
}
    bool wordBreak(string s, vector<string>& wordDict) {
        int n=wordDict.size();
        unordered_map<string,int> mp;
        for(int i=0;i<n;i++)
        mp[wordDict[i]]++;
        vector<int> dp(s.length()+1,-1);
        int ans= rec(s,mp,dp);
        if(ans==-1)
        return 0;
        return ans;
        
    }

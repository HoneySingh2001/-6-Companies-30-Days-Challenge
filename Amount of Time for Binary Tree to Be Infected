int time( unordered_map<TreeNode* ,TreeNode* > &mp,TreeNode* res,int &ans){
    queue<TreeNode* > q;
    q.push(res);
    unordered_map<TreeNode* ,bool> vis;
    vis[res]=1;
    while(!q.empty()){
        int k=q.size();
        int f=0;
        while(k--){
            TreeNode* node=q.front();
            q.pop();
            if(node->left && !vis[node->left]){
                q.push(node->left);
                f=1;
                vis[node->left]=1;
            }
            if(node->right && !vis[node->right]){
                q.push(node->right);
                f=1;
                vis[node->right]=1;
            }
            if(mp[node] && !vis[mp[node]]){
                q.push(mp[node]);
                vis[mp[node]]=1;
                f=1;
            }
        }
        if(f==1)
        ans=ans+1;
    }
    return ans;
}
TreeNode* rec(TreeNode* root, unordered_map<TreeNode* ,TreeNode* > &mp,int start){
    queue<TreeNode* > q;
    TreeNode* res;
    q.push(root);
    while(!q.empty()){
        TreeNode* node=q.front();
        q.pop();
        if(node->val==start) res=node;
        if(node->left){
            mp[node->left]=node;
            q.push(node->left);
        }
        if(node->right){
            mp[node->right]=node;
            q.push(node->right);
        }

    }
    return res;
}
    int amountOfTime(TreeNode* root, int start) {
        unordered_map<TreeNode* ,TreeNode* > mp;
        TreeNode* res=rec(root,mp,start);
        int ans=0;
        int c=time(mp,res,ans);
        return c;
    }
};

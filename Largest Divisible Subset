vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        if(n==1){
            vector<int> v;
            v.push_back(nums[0]);
            return v;
        }
        sort(nums.begin(),nums.end());
       
        int dp[n];
        dp[0]=1;
        int ans=0;
        int start=-1;
        int last=n;
        for(int i=1;i<n;i++){
            dp[i]=1;
            for(int j=0;j<i;j++){
                if(nums[i]%nums[j]==0){
                    dp[i]=max(dp[i],dp[j]+1);
                }
            }
            ans=max(ans,dp[i]);
            }
            
            vector<int> temp;
            
            int prev=-1;
            for(int i=n-1;i>=0;){
                if(ans==dp[i] && (prev%nums[i]==0 || prev==-1)){
                    temp.push_back(nums[i]);
                    
                    ans--;
                    prev=nums[i];
                    i--;
                }
                else
                i--;

            }
            return temp;
       
    }
